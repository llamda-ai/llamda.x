<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.21.2 -->
<document source="/Users/claudiobrandolino/llamda/llamda-fn/docs/claude.md" translation_progress="{'total': 0, 'translated': 0}" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <section ids="file-list" names="file\ list">
        <title>File list</title>
        <section ids="llamda-py" names="llamda.py">
            <title>llamda.py</title>
            <paragraph>Main entry point for the library.</paragraph>
        </section>
        <section ids="llamda-fn-llms" names="llamda_fn/llms">
            <title>llamda_fn/llms</title>
            <paragraph>Files for working with LLMs.</paragraph>
            <section ids="api-types-py" names="api_types.py">
                <title>api_types.py</title>
                <paragraph>import uuid
                    from functools import cached_property
                    from typing import Any, Literal, Self, List</paragraph>
                <paragraph>from openai.types.chat import ChatCompletion as OaiCompletion
                    from openai.types.chat import ChatCompletionToolParam as OaiToolParam
                    from openai.types.chat import ChatCompletionMessageParam as OaiRequestMessage
                    from openai.types.chat import ChatCompletionAssistantMessageParam as OaiAssistantMessage
                    from openai.types.chat import ChatCompletionUserMessageParam as OaiUserMessage
                    from openai.types.chat import ChatCompletionSystemMessageParam as OaiSystemMessage
                    from openai.types.chat import ChatCompletionMessageToolCall as OaiToolCall
                    from openai.types.chat import ChatCompletionFunctionCallOptionParam as OaiToolFunction
                    from pydantic import BaseModel, Field</paragraph>
                <paragraph>Role = Literal[“user”, “system”, “assistant”, “tool”]</paragraph>
                <definition_list>
                    <definition_list_item>
                        <term>class LlToolCall(BaseModel):</term>
                        <definition>
                            <paragraph>id: str
                                name: str
                                arguments: str</paragraph>
                            <paragraph>@classmethod
                                def from_oai_tool_call(cls, call: OaiToolCall) -&gt; Self:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>return cls(</term>
                                        <definition>
                                            <paragraph>id=call.id,
                                                name=call.function.name,
                                                arguments=call.function.arguments,</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                                <paragraph>)</paragraph>
                            </block_quote>
                        </definition>
                    </definition_list_item>
                    <definition_list_item>
                        <term>class ToolResponse(BaseModel):</term>
                        <definition>
                            <paragraph>id: str
                                name: str
                                arguments: str
                                _result: str</paragraph>
                            <definition_list>
                                <definition_list_item>
                                    <term>def __init__(self, result: str = “”, <problematic ids="id2" refid="id1">**</problematic>kwargs: Any) -&gt; None:</term>
                                    <definition>
                                        <paragraph>super().__init__(<problematic ids="id4" refid="id3">**</problematic>kwargs)
                                            self._result = result</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <paragraph>@cached_property
                                def result(self) -&gt; str:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>if isinstance(self._result, BaseModel):</term>
                                        <definition>
                                            <paragraph>return self._result.model_dump_json()</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>else:</term>
                                        <definition>
                                            <paragraph>return self._result</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                            </block_quote>
                        </definition>
                    </definition_list_item>
                    <definition_list_item>
                        <term>def make_oai_role_message(</term>
                        <definition>
                            <paragraph>role: Role,
                                content: str,
                                name: str | None = None,
                                tool_calls: List[LlToolCall] | None = None,
                                <problematic ids="id6" refid="id5">**</problematic>kwargs: Any,</paragraph>
                        </definition>
                    </definition_list_item>
                    <definition_list_item>
                        <term>) -&gt; OaiUserMessage | OaiSystemMessage | OaiAssistantMessage:</term>
                        <definition>
                            <paragraph>kwargs = {}
                                if name:</paragraph>
                            <block_quote>
                                <paragraph>kwargs[“name”] = name</paragraph>
                            </block_quote>
                            <definition_list>
                                <definition_list_item>
                                    <term>match role:</term>
                                    <definition>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>case “user”:</term>
                                                <definition>
                                                    <definition_list>
                                                        <definition_list_item>
                                                            <term>return OaiUserMessage(</term>
                                                            <definition>
                                                                <paragraph>content=content,
                                                                    <problematic ids="id8" refid="id7">**</problematic>kwargs,</paragraph>
                                                            </definition>
                                                        </definition_list_item>
                                                    </definition_list>
                                                    <paragraph>)</paragraph>
                                                </definition>
                                            </definition_list_item>
                                            <definition_list_item>
                                                <term>case “system”:</term>
                                                <definition>
                                                    <definition_list>
                                                        <definition_list_item>
                                                            <term>return OaiSystemMessage(</term>
                                                            <definition>
                                                                <paragraph>content=content,
                                                                    <problematic ids="id10" refid="id9">**</problematic>kwargs,</paragraph>
                                                            </definition>
                                                        </definition_list_item>
                                                    </definition_list>
                                                    <paragraph>)</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                        <paragraph>case “assistant”:</paragraph>
                                        <block_quote>
                                            <definition_list>
                                                <definition_list_item>
                                                    <term>if tool_calls:</term>
                                                    <definition>
                                                        <definition_list>
                                                            <definition_list_item>
                                                                <term>kwargs[“tool_calls”] = [</term>
                                                                <definition>
                                                                    <paragraph>tool_call.model_dump() for tool_call in tool_calls</paragraph>
                                                                </definition>
                                                            </definition_list_item>
                                                        </definition_list>
                                                        <paragraph>]</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                                <definition_list_item>
                                                    <term>return OaiAssistantMessage(</term>
                                                    <definition>
                                                        <paragraph>content=content,
                                                            <problematic ids="id12" refid="id11">**</problematic>kwargs,</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                            </definition_list>
                                            <paragraph>)</paragraph>
                                        </block_quote>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>case _:</term>
                                                <definition>
                                                    <paragraph>raise ValueError(f”Invalid role: {role}”)</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </definition>
                    </definition_list_item>
                    <definition_list_item>
                        <term>OaiRoleMessage: dict[</term>
                        <definition>
                            <paragraph>Role, type[OaiUserMessage] | type[OaiSystemMessage] | type[OaiAssistantMessage]</paragraph>
                        </definition>
                    </definition_list_item>
                    <definition_list_item>
                        <term>] = {</term>
                        <definition>
                            <paragraph>“user”: OaiUserMessage,
                                “system”: OaiSystemMessage,
                                “assistant”: OaiAssistantMessage,</paragraph>
                        </definition>
                    </definition_list_item>
                </definition_list>
                <paragraph>}</paragraph>
                <definition_list>
                    <definition_list_item>
                        <term>class LLMessageMeta(BaseModel):</term>
                        <definition>
                            <paragraph>choice: dict[str, Any] | None = Field(exclude=True)
                                completion: dict[str, Any] | None = Field(exclude=True)</paragraph>
                        </definition>
                    </definition_list_item>
                    <definition_list_item>
                        <term>class LLMessage(BaseModel):</term>
                        <definition>
                            <paragraph>id: str = Field(default_factory=uuid.uuid4)
                                role: Role
                                content: str
                                name: str | None = None
                                tool_calls: List[LlToolCall] | None = None
                                meta: LLMessageMeta | None = None</paragraph>
                            <definition_list>
                                <definition_list_item>
                                    <term>def get_oai_message(self):</term>
                                    <definition>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>return make_oai_role_message(</term>
                                                <definition>
                                                    <paragraph>self.role, self.content, self.name, self.tool_calls</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                        <paragraph>)</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <paragraph>@classmethod
                                def from_execution(cls, execution: ToolResponse) -&gt; Self:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>return cls(</term>
                                        <definition>
                                            <paragraph>role=”tool”,
                                                id=execution.id,
                                                name=execution.name,
                                                content=execution.result,</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                                <paragraph>)</paragraph>
                            </block_quote>
                        </definition>
                    </definition_list_item>
                    <definition_list_item>
                        <term>class LLCompletion(BaseModel):</term>
                        <definition>
                            <paragraph>message: LLMessage
                                meta: LLMessageMeta | None = None</paragraph>
                            <paragraph>@classmethod
                                def from_completion(cls, completion: OaiCompletion) -&gt; Self:</paragraph>
                            <block_quote>
                                <paragraph>choice = completion.choices[0]
                                    message = choice.message
                                    tool_calls = None
                                    if message.tool_calls:</paragraph>
                                <block_quote>
                                    <definition_list>
                                        <definition_list_item>
                                            <term>tool_calls = [</term>
                                            <definition>
                                                <paragraph>LlToolCall.from_oai_tool_call(tc) for tc in message.tool_calls</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                    <paragraph>]</paragraph>
                                </block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>return cls(</term>
                                        <definition>
                                            <definition_list>
                                                <definition_list_item>
                                                    <term>message=LLMessage(</term>
                                                    <definition>
                                                        <paragraph>id=completion.id,
                                                            meta=LLMessageMeta(</paragraph>
                                                        <block_quote>
                                                            <paragraph>choice=choice.model_dump(exclude={“message”}),
                                                                completion=completion.model_dump(exclude={“choices”}),</paragraph>
                                                        </block_quote>
                                                        <paragraph>),
                                                            role=message.role,
                                                            content=message.content or “”,
                                                            tool_calls=tool_calls,</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                            </definition_list>
                                            <paragraph>)</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                                <paragraph>)</paragraph>
                            </block_quote>
                        </definition>
                    </definition_list_item>
                    <definition_list_item>
                        <term>class OaiRequest(BaseModel):</term>
                        <definition>
                            <paragraph>messages: list[OaiRequestMessage]
                                tools: list[OaiToolParam]</paragraph>
                        </definition>
                    </definition_list_item>
                    <definition_list_item>
                        <term>__all__ = [</term>
                        <definition>
                            <paragraph>“LLMessage”,
                                “LLCompletion”,
                                “OaiCompletion”,
                                “OaiToolParam”,
                                “OaiToolFunction”,
                                “OaiToolCall”,</paragraph>
                        </definition>
                    </definition_list_item>
                </definition_list>
                <paragraph>]</paragraph>
            </section>
            <section ids="llm-manager-py" names="llm_manager.py">
                <title>llm_manager.py</title>
                <paragraph>from typing import Any
                    from pydantic import Field, model_validator
                    from openai import OpenAI
                    from openai.types.chat import ChatCompletion
                    from .api_types import LLCompletion, LLMessage
                    from .type_transformers import make_oai_message
                    from .api import LlmApiConfig</paragraph>
                <definition_list>
                    <definition_list_item>
                        <term>class LLManager(OpenAI):</term>
                        <definition>
                            <paragraph>api_config: dict[str, Any] = Field(default_factory=dict)
                                llm_name: str = Field(default=”gpt-4-0613”)</paragraph>
                            <definition_list>
                                <definition_list_item>
                                    <term>def __init__(</term>
                                    <definition>
                                        <paragraph>self,
                                            llm_name: str = “gpt-4-0613”,
                                            <problematic ids="id2" refid="id1">**</problematic>kwargs: Any,</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>):</term>
                                    <definition>
                                        <paragraph>self.llm_name = llm_name
                                            super().__init__(<problematic ids="id4" refid="id3">**</problematic>kwargs)</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>class Config:</term>
                                    <definition>
                                        <paragraph>arbitrary_types_allowed = True</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <paragraph>def chat_completion(self, messages: list[LLMessage], <problematic ids="id6" refid="id5">**</problematic>kwargs: Any) -&gt; LLCompletion:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>oai_completion: ChatCompletion = super().chat.completions.create(</term>
                                        <definition>
                                            <paragraph>messages=[make_oai_message(<problematic ids="id8" refid="id7">**</problematic>msg.model_dump()) for msg in messages],
                                                model=self.llm_name,</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                                <paragraph>)
                                    return LLCompletion.from_completion(oai_completion)</paragraph>
                            </block_quote>
                            <paragraph>@model_validator(mode=”before”)
                                @classmethod
                                def validate_api_and_model(cls, data: dict[str, Any]) -&gt; dict[str, Any]:</paragraph>
                            <block_quote>
                                <paragraph>“””Validate the API and model.”””
                                    api_config = data.get(“api_config”) or {}
                                    api = (</paragraph>
                                <block_quote>
                                    <paragraph>data.get(“api”)
                                        if isinstance(data.get(“api”), OpenAI)
                                        else LlmApiConfig(<problematic ids="id10" refid="id9">**</problematic>api_config).create_openai_client()</paragraph>
                                </block_quote>
                                <paragraph>)
                                    if not api or not isinstance(api, OpenAI):</paragraph>
                                <block_quote>
                                    <paragraph>raise ValueError(“Unable to create OpenAI client.”)</paragraph>
                                </block_quote>
                                <paragraph>data.update({“api”: api})</paragraph>
                                <definition_list>
                                    <definition_list_item>
                                        <term>if data.get(“llm_name”):</term>
                                        <definition>
                                            <paragraph>available_models: list[str] = [model.id for model in api.models.list()]
                                                if data.get(“llm_name”) not in available_models:</paragraph>
                                            <block_quote>
                                                <definition_list>
                                                    <definition_list_item>
                                                        <term>raise ValueError(</term>
                                                        <definition>
                                                            <paragraph>f”Model ‘{data.get(‘llm_name’)}’ is not available. ”
                                                                f”Available models: {’, ‘.join(available_models)}”</paragraph>
                                                        </definition>
                                                    </definition_list_item>
                                                </definition_list>
                                                <paragraph>)</paragraph>
                                            </block_quote>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>else:</term>
                                        <definition>
                                            <paragraph>raise ValueError(“No LLM API client or LLM name provided.”)</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                                <paragraph>return data</paragraph>
                            </block_quote>
                        </definition>
                    </definition_list_item>
                </definition_list>
            </section>
            <section ids="type-transformers-py" names="type_transformers.py">
                <title>type_transformers.py</title>
                <paragraph>from typing import Any, List
                    from llamda_fn.llms.api_types import (</paragraph>
                <block_quote>
                    <paragraph>Role,
                        LlToolCall,
                        OaiUserMessage,
                        OaiSystemMessage,
                        OaiAssistantMessage,</paragraph>
                </block_quote>
                <paragraph>)</paragraph>
                <definition_list>
                    <definition_list_item>
                        <term>def make_oai_message(</term>
                        <definition>
                            <paragraph>role: Role,
                                content: str,
                                name: str | None = None,
                                tool_calls: List[LlToolCall] | None = None,
                                <problematic ids="id2" refid="id1">**</problematic>kwargs: Any,</paragraph>
                        </definition>
                    </definition_list_item>
                    <definition_list_item>
                        <term>) -&gt; OaiUserMessage | OaiSystemMessage | OaiAssistantMessage:</term>
                        <definition>
                            <paragraph>kwargs = {}
                                if name:</paragraph>
                            <block_quote>
                                <paragraph>kwargs[“name”] = name</paragraph>
                            </block_quote>
                            <definition_list>
                                <definition_list_item>
                                    <term>match role:</term>
                                    <definition>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>case “user”:</term>
                                                <definition>
                                                    <definition_list>
                                                        <definition_list_item>
                                                            <term>return OaiUserMessage(</term>
                                                            <definition>
                                                                <paragraph>content=content,
                                                                    <problematic ids="id4" refid="id3">**</problematic>kwargs,</paragraph>
                                                            </definition>
                                                        </definition_list_item>
                                                    </definition_list>
                                                    <paragraph>)</paragraph>
                                                </definition>
                                            </definition_list_item>
                                            <definition_list_item>
                                                <term>case “system”:</term>
                                                <definition>
                                                    <definition_list>
                                                        <definition_list_item>
                                                            <term>return OaiSystemMessage(</term>
                                                            <definition>
                                                                <paragraph>content=content,
                                                                    <problematic ids="id6" refid="id5">**</problematic>kwargs,</paragraph>
                                                            </definition>
                                                        </definition_list_item>
                                                    </definition_list>
                                                    <paragraph>)</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                        <paragraph>case “assistant”:</paragraph>
                                        <block_quote>
                                            <definition_list>
                                                <definition_list_item>
                                                    <term>if tool_calls:</term>
                                                    <definition>
                                                        <definition_list>
                                                            <definition_list_item>
                                                                <term>kwargs[“tool_calls”] = [</term>
                                                                <definition>
                                                                    <paragraph>tool_call.model_dump() for tool_call in tool_calls</paragraph>
                                                                </definition>
                                                            </definition_list_item>
                                                        </definition_list>
                                                        <paragraph>]</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                                <definition_list_item>
                                                    <term>return OaiAssistantMessage(</term>
                                                    <definition>
                                                        <paragraph>content=content,
                                                            <problematic ids="id8" refid="id7">**</problematic>kwargs,</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                            </definition_list>
                                            <paragraph>)</paragraph>
                                        </block_quote>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>case _:</term>
                                                <definition>
                                                    <paragraph>raise ValueError(f”Invalid role: {role}”)</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </definition>
                    </definition_list_item>
                    <definition_list_item>
                        <term>OaiRoleMessage: dict[</term>
                        <definition>
                            <paragraph>Role, type[OaiUserMessage] | type[OaiSystemMessage] | type[OaiAssistantMessage]</paragraph>
                        </definition>
                    </definition_list_item>
                    <definition_list_item>
                        <term>] = {</term>
                        <definition>
                            <paragraph>“user”: OaiUserMessage,
                                “system”: OaiSystemMessage,
                                “assistant”: OaiAssistantMessage,</paragraph>
                        </definition>
                    </definition_list_item>
                </definition_list>
                <paragraph>}</paragraph>
            </section>
            <section ids="exchange-py" names="exchange.py">
                <title>exchange.py</title>
                <paragraph>from llamda_fn.llms.api_types import LLMessage</paragraph>
                <paragraph>from collections import UserList
                    from typing import List, Optional</paragraph>
                <definition_list>
                    <definition_list_item>
                        <term>class Exchange(UserList[LLMessage]):</term>
                        <definition>
                            <paragraph>“””
                                An exchange represents a series of messages between a user and an assistant.
                                “””</paragraph>
                            <definition_list>
                                <definition_list_item>
                                    <term>def __init__(</term>
                                    <definition>
                                        <paragraph>self,
                                            system_message: Optional[str] = None,
                                            messages: Optional[List[LLMessage]] = None,</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>) -&gt; None:</term>
                                    <definition>
                                        <paragraph>“””
                                            Initialize the exchange.
                                            “””
                                            super().__init__()
                                            if system_message:</paragraph>
                                        <block_quote>
                                            <paragraph>self.data.append(LLMessage(content=system_message, role=”system”))</paragraph>
                                        </block_quote>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>if messages:</term>
                                                <definition>
                                                    <paragraph>self.data.extend(messages)</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>def ask(self, content: str) -&gt; None:</term>
                                    <definition>
                                        <paragraph>“””
                                            Add a user message to the exchange.
                                            “””
                                            self.data.append(LLMessage(content=content, role=”user”))</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>def append(self, item: LLMessage) -&gt; None:</term>
                                    <definition>
                                        <paragraph>“””
                                            Add a message to the exchange.
                                            “””</paragraph>
                                        <paragraph>self.data.append(item)</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>def get_context(self, n: int = 5) -&gt; list[LLMessage]:</term>
                                    <definition>
                                        <paragraph>“””
                                            Get the last n messages as context.
                                            “””
                                            return self.data[-n:]</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>def __str__(self) -&gt; str:</term>
                                    <definition>
                                        <paragraph>“””
                                            String representation of the exchange.
                                            “””
                                            return “n”.join(f”{msg.role}: {msg.content}” for msg in self.data)</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </definition>
                    </definition_list_item>
                </definition_list>
            </section>
        </section>
        <section ids="llamda-fn-functions" names="llamda_fn/functions">
            <title>llamda_fn/functions</title>
            <section ids="function-types-py" names="function_types.py">
                <title>function_types.py</title>
                <paragraph>from typing import Any, Callable, Dict, Generic, TypeVar, Type
                    from pydantic import BaseModel, Field, create_model, ConfigDict</paragraph>
                <paragraph>from llamda_fn.llms import OaiToolParam</paragraph>
                <paragraph>R = TypeVar(“R”)</paragraph>
                <definition_list>
                    <definition_list_item>
                        <term>class LlamdaCallable(Generic[R]):</term>
                        <definition>
                            <definition_list>
                                <definition_list_item>
                                    <term>def run(self, <problematic ids="id2" refid="id1">**</problematic>kwargs: Any) -&gt; R:</term>
                                    <definition>
                                        <paragraph>raise NotImplementedError</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>def to_tool_schema(self) -&gt; OaiToolParam:</term>
                                    <definition>
                                        <paragraph>raise NotImplementedError</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <paragraph>@classmethod
                                def create(</paragraph>
                            <block_quote>
                                <paragraph>cls,
                                    call_func: Callable[…, R],
                                    fields: Dict[str, tuple[type, Any]],
                                    name: str = “”,
                                    description: str = “”,
                                    <problematic ids="id4" refid="id3">**</problematic>kwargs: Any,</paragraph>
                            </block_quote>
                            <definition_list>
                                <definition_list_item>
                                    <term>) -&gt; “LlamdaCallable[R]”:</term>
                                    <definition>
                                        <paragraph>raise NotImplementedError</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </definition>
                    </definition_list_item>
                    <definition_list_item>
                        <term>class LlamdaBase(BaseModel, LlamdaCallable[R]):</term>
                        <definition>
                            <paragraph>“””The base class for Llamda functions.”””</paragraph>
                            <paragraph>name: str
                                description: str
                                call_func: Callable[…, R]</paragraph>
                            <paragraph>model_config = ConfigDict(arbitrary_types_allowed=True)</paragraph>
                            <definition_list>
                                <definition_list_item>
                                    <term>def to_schema(self) -&gt; Dict[str, Any]:</term>
                                    <definition>
                                        <paragraph>“””Get the JSON schema for the Llamda function.”””
                                            raise NotImplementedError</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>def to_tool_schema(self) -&gt; OaiToolParam:</term>
                                    <definition>
                                        <paragraph>“””Get the JSON schema for the LlamdaPydantic.”””
                                            schema = self.to_schema()
                                            return {</paragraph>
                                        <block_quote>
                                            <paragraph>“type”: “function”,
                                                “function”: {</paragraph>
                                            <block_quote>
                                                <paragraph>“name”: schema[“title”],
                                                    “description”: schema[“description”],
                                                    “parameters”: {</paragraph>
                                                <block_quote>
                                                    <paragraph>“type”: “object”,
                                                        “properties”: schema[“properties”],
                                                        “required”: schema.get(“required”, []),</paragraph>
                                                </block_quote>
                                                <paragraph>},</paragraph>
                                            </block_quote>
                                            <paragraph>},</paragraph>
                                        </block_quote>
                                        <paragraph>}</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </definition>
                    </definition_list_item>
                    <definition_list_item>
                        <term>class LlamdaFunction(LlamdaBase[R]):</term>
                        <definition>
                            <paragraph>“””A Llamda function that uses a simple function model as the input.”””</paragraph>
                            <paragraph>parameter_model: Type[BaseModel]</paragraph>
                            <paragraph>@classmethod
                                def create(</paragraph>
                            <block_quote>
                                <paragraph>cls,
                                    call_func: Callable[…, R],
                                    fields: Dict[str, tuple[type, Any]],
                                    name: str = “”,
                                    description: str = “”,
                                    <problematic ids="id6" refid="id5">**</problematic>kwargs: Any,</paragraph>
                            </block_quote>
                            <definition_list>
                                <definition_list_item>
                                    <term>) -&gt; “LlamdaFunction[R]”:</term>
                                    <definition>
                                        <paragraph>“””Create a new LlamdaFunction from a function.”””
                                            model_fields = {}
                                            for field_name, (field_type, field_default) in fields.items():</paragraph>
                                        <block_quote>
                                            <definition_list>
                                                <definition_list_item>
                                                    <term>if field_default is …:</term>
                                                    <definition>
                                                        <paragraph>model_fields[field_name] = (field_type, Field(…))</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                                <definition_list_item>
                                                    <term>else:</term>
                                                    <definition>
                                                        <paragraph>model_fields[field_name] = (field_type, Field(default=field_default))</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                            </definition_list>
                                        </block_quote>
                                        <paragraph>parameter_model = create_model(f”{name}Parameters”, <problematic ids="id8" refid="id7">**</problematic>model_fields)</paragraph>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>return cls(</term>
                                                <definition>
                                                    <paragraph>name=name,
                                                        description=description,
                                                        parameter_model=parameter_model,
                                                        call_func=call_func,</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                        <paragraph>)</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>def run(self, <problematic ids="id10" refid="id9">**</problematic>kwargs: Any) -&gt; R:</term>
                                    <definition>
                                        <paragraph>“””Run the LlamdaFunction with the given parameters.”””
                                            validated_params = self.parameter_model(<problematic ids="id12" refid="id11">**</problematic>kwargs)
                                            return self.call_func(<problematic ids="id14" refid="id13">**</problematic>validated_params.model_dump())</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>def to_schema(self) -&gt; Dict[str, Any]:</term>
                                    <definition>
                                        <paragraph>“””Get the JSON schema for the LlamdaFunction.”””
                                            schema = self.parameter_model.model_json_schema()
                                            schema[“title”] = self.name
                                            schema[“description”] = self.description
                                            return schema</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </definition>
                    </definition_list_item>
                    <definition_list_item>
                        <term>class LlamdaPydantic(LlamdaBase[R]):</term>
                        <definition>
                            <paragraph>“””A Llamda function that uses a Pydantic model as the input.”””</paragraph>
                            <paragraph>model: Type[BaseModel]</paragraph>
                            <paragraph>@classmethod
                                def create(</paragraph>
                            <block_quote>
                                <paragraph>cls,
                                    call_func: Callable[…, R],
                                    fields: Dict[str, tuple[type, Any]],
                                    name: str = “”,
                                    description: str = “”,
                                    <problematic ids="id16" refid="id15">**</problematic>kwargs: Any,</paragraph>
                            </block_quote>
                            <definition_list>
                                <definition_list_item>
                                    <term>) -&gt; “LlamdaPydantic[R]”:</term>
                                    <definition>
                                        <paragraph>“””Create a new LlamdaPydantic from a Pydantic model.”””
                                            return cls(</paragraph>
                                        <block_quote>
                                            <paragraph>name=name,
                                                description=description,
                                                model=model,
                                                call_func=func,</paragraph>
                                        </block_quote>
                                        <paragraph>)</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>def run(self, <problematic ids="id18" refid="id17">**</problematic>kwargs: Any) -&gt; R:</term>
                                    <definition>
                                        <paragraph>“””Run the LlamdaPydantic with the given parameters.”””
                                            validated_params = self.model(<problematic ids="id20" refid="id19">**</problematic>kwargs)
                                            return self.call_func(validated_params)</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>def to_schema(self) -&gt; dict[str, Any]:</term>
                                    <definition>
                                        <paragraph>“””Get the JSON schema for the LlamdaPydantic.”””
                                            schema = self.model.model_json_schema()
                                            schema[“title”] = self.name
                                            schema[“description”] = self.description
                                            return schema</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </definition>
                    </definition_list_item>
                </definition_list>
            </section>
            <section ids="process-fields-py" names="process_fields.py">
                <title>process_fields.py</title>
                <paragraph>from ast import List
                    from typing import Any, Dict, Union, get_args, get_origin
                    from pydantic import BaseModel, Field, ValidationError, create_model
                    from pydantic.fields import FieldInfo
                    from pydantic_core import SchemaError</paragraph>
                <paragraph>JsonDict = Dict[str, Any]</paragraph>
                <definition_list>
                    <definition_list_item>
                        <term>def process_field(</term>
                        <definition>
                            <paragraph>field_type: Any, field_info: Union[JsonDict, FieldInfo]</paragraph>
                        </definition>
                    </definition_list_item>
                    <definition_list_item>
                        <term>) -&gt; tuple[Any, JsonDict]:</term>
                        <definition>
                            <paragraph>“””
                                Process a field type and info, using Pydantic’s model_json_schema for schema generation.
                                “””
                                try:</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>if isinstance(field_type, type) and issubclass(field_type, BaseModel):</term>
                                        <definition>
                                            <paragraph># Handle nested Pydantic models
                                                nested_schema = field_type.model_json_schema()
                                                field_schema = {</paragraph>
                                            <block_quote>
                                                <paragraph>“type”: “object”,
                                                    “properties”: nested_schema.get(“properties”, {}),
                                                    “required”: nested_schema.get(“required”, []),</paragraph>
                                            </block_quote>
                                            <paragraph>}</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>else:</term>
                                        <definition>
                                            <paragraph># Create a temporary model with the field
                                                if isinstance(field_info, FieldInfo):</paragraph>
                                            <block_quote>
                                                <paragraph>temp_field = field_info</paragraph>
                                            </block_quote>
                                            <definition_list>
                                                <definition_list_item>
                                                    <term>else:</term>
                                                    <definition>
                                                        <paragraph>temp_field = Field(<problematic ids="id2" refid="id1">**</problematic>field_info)</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                            </definition_list>
                                            <paragraph>TempModel = create_model(“TempModel”, field=(field_type, temp_field))</paragraph>
                                            <paragraph># Get the JSON schema for the entire model
                                                full_schema = TempModel.model_json_schema()</paragraph>
                                            <paragraph># Extract the schema for our specific field
                                                field_schema = full_schema[“properties”][“field”]</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                                <paragraph># Handle Optional types
                                    origin = get_origin(field_type)
                                    if origin is Union:</paragraph>
                                <block_quote>
                                    <paragraph>args = get_args(field_type)
                                        if type(None) in args:</paragraph>
                                    <block_quote>
                                        <paragraph># This is an Optional type
                                            non_none_type = next(arg for arg in args if arg is not type(None))
                                            if non_none_type is float:</paragraph>
                                        <block_quote>
                                            <paragraph>field_schema = {“type”: “number”, “nullable”: True}</paragraph>
                                        </block_quote>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>elif non_none_type is int:</term>
                                                <definition>
                                                    <paragraph>field_schema = {“type”: “integer”, “nullable”: True}</paragraph>
                                                </definition>
                                            </definition_list_item>
                                            <definition_list_item>
                                                <term>elif non_none_type is str:</term>
                                                <definition>
                                                    <paragraph>field_schema = {“type”: “string”, “nullable”: True}</paragraph>
                                                </definition>
                                            </definition_list_item>
                                            <definition_list_item>
                                                <term>elif isinstance(non_none_type, type) and issubclass(</term>
                                                <definition>
                                                    <paragraph>non_none_type, BaseModel</paragraph>
                                                </definition>
                                            </definition_list_item>
                                            <definition_list_item>
                                                <term>):</term>
                                                <definition>
                                                    <paragraph>field_schema = {“type”: “object”, “nullable”: True}</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                    </block_quote>
                                </block_quote>
                                <paragraph># Ensure ‘type’ is always set
                                    if “type” not in field_schema:</paragraph>
                                <block_quote>
                                    <definition_list>
                                        <definition_list_item>
                                            <term>if isinstance(field_type, type) and issubclass(field_type, BaseModel):</term>
                                            <definition>
                                                <paragraph>field_schema[“type”] = “object”</paragraph>
                                            </definition>
                                        </definition_list_item>
                                        <definition_list_item>
                                            <term>elif field_type is int:</term>
                                            <definition>
                                                <paragraph>field_schema[“type”] = “integer”</paragraph>
                                            </definition>
                                        </definition_list_item>
                                        <definition_list_item>
                                            <term>elif field_type is float:</term>
                                            <definition>
                                                <paragraph>field_schema[“type”] = “number”</paragraph>
                                            </definition>
                                        </definition_list_item>
                                        <definition_list_item>
                                            <term>elif field_type is str:</term>
                                            <definition>
                                                <paragraph>field_schema[“type”] = “string”</paragraph>
                                            </definition>
                                        </definition_list_item>
                                        <definition_list_item>
                                            <term>elif field_type is bool:</term>
                                            <definition>
                                                <paragraph>field_schema[“type”] = “boolean”</paragraph>
                                            </definition>
                                        </definition_list_item>
                                        <definition_list_item>
                                            <term>elif field_type is list or field_type is List:</term>
                                            <definition>
                                                <paragraph>field_schema[“type”] = “array”</paragraph>
                                            </definition>
                                        </definition_list_item>
                                        <definition_list_item>
                                            <term>elif field_type is dict or field_type is Dict:</term>
                                            <definition>
                                                <paragraph>field_schema[“type”] = “object”</paragraph>
                                            </definition>
                                        </definition_list_item>
                                        <definition_list_item>
                                            <term>else:</term>
                                            <definition>
                                                <paragraph>field_schema[“type”] = “any”</paragraph>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </block_quote>
                                <paragraph># Remove ‘title’ field if present
                                    field_schema.pop(“title”, None)</paragraph>
                                <paragraph># Merge field_info with the generated schema
                                    if isinstance(field_info, dict):</paragraph>
                                <block_quote>
                                    <definition_list>
                                        <definition_list_item>
                                            <term>for key, value in field_info.items():</term>
                                            <definition>
                                                <definition_list>
                                                    <definition_list_item>
                                                        <term>if key not in field_schema or field_schema[key] is None:</term>
                                                        <definition>
                                                            <paragraph>field_schema[key] = value</paragraph>
                                                        </definition>
                                                    </definition_list_item>
                                                </definition_list>
                                            </definition>
                                        </definition_list_item>
                                    </definition_list>
                                </block_quote>
                                <paragraph>return field_type, field_schema</paragraph>
                            </block_quote>
                            <definition_list>
                                <definition_list_item>
                                    <term>except (SchemaError, ValidationError) as e:</term>
                                    <definition>
                                        <paragraph>print(f”Error processing field: {e}”)
                                            return Any, {“type”: “any”, “error”: str(e)}</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </definition>
                    </definition_list_item>
                    <definition_list_item>
                        <term>def process_fields(fields: Dict[str, Any]) -&gt; Dict[str, tuple[Any, JsonDict]]:</term>
                        <definition>
                            <paragraph>“””
                                Process all fields in a model, using Pydantic for complex types.
                                “””
                                processed_fields = {}
                                for field_name, field_value in fields.items():</paragraph>
                            <block_quote>
                                <definition_list>
                                    <definition_list_item>
                                        <term>if isinstance(field_value, FieldInfo):</term>
                                        <definition>
                                            <paragraph>field_type = field_value.annotation
                                                field_info = field_value</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>elif isinstance(field_value, tuple):</term>
                                        <definition>
                                            <paragraph>field_type, field_info = field_value</paragraph>
                                        </definition>
                                    </definition_list_item>
                                    <definition_list_item>
                                        <term>else:</term>
                                        <definition>
                                            <definition_list>
                                                <definition_list_item>
                                                    <term>raise ValueError(</term>
                                                    <definition>
                                                        <paragraph>f”Unexpected field value type for {field_name}: {type(field_value)}”</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                            </definition_list>
                                            <paragraph>)</paragraph>
                                        </definition>
                                    </definition_list_item>
                                </definition_list>
                                <paragraph>processed_type, processed_info = process_field(field_type, field_info)</paragraph>
                                <paragraph># Ensure ‘type’ is set for nested Pydantic models
                                    if isinstance(processed_type, type) and issubclass(processed_type, BaseModel):</paragraph>
                                <block_quote>
                                    <paragraph>processed_info[“type”] = “object”</paragraph>
                                </block_quote>
                                <paragraph>processed_fields[field_name] = (processed_type, processed_info)</paragraph>
                            </block_quote>
                            <paragraph>return processed_fields</paragraph>
                        </definition>
                    </definition_list_item>
                </definition_list>
            </section>
            <section ids="process-functions-py" names="process_functions.py">
                <title>process_functions.py</title>
                <paragraph>import json
                    from inspect import Parameter, isclass, signature
                    from typing import (</paragraph>
                <block_quote>
                    <paragraph>Any,
                        Callable,
                        Dict,
                        List,
                        Optional,
                        TypeVar,
                        ParamSpec,
                        Sequence,
                        Iterator,</paragraph>
                </block_quote>
                <paragraph>)</paragraph>
                <paragraph>from pydantic import BaseModel, ValidationError
                    from llamda_fn.llms.api_types import LlToolCall, ToolResponse, OaiToolParam
                    from .llamda_classes import LlamdaFunction, LlamdaPydantic, LlamdaCallable</paragraph>
                <paragraph>R = TypeVar(“R”)
                    P = ParamSpec(“P”)</paragraph>
                <definition_list>
                    <definition_list_item>
                        <term>class LlamdaFunctions:</term>
                        <definition>
                            <definition_list>
                                <definition_list_item>
                                    <term>def __init__(self) -&gt; None:</term>
                                    <definition>
                                        <paragraph>self._tools: Dict[str, LlamdaCallable[Any]] = {}</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                            <paragraph>@property
                                def tools(self) -&gt; Dict[str, LlamdaCallable[Any]]:</paragraph>
                            <block_quote>
                                <paragraph>return self._tools</paragraph>
                            </block_quote>
                            <definition_list>
                                <definition_list_item>
                                    <term>def llamdafy(</term>
                                    <definition>
                                        <paragraph>self,
                                            name: Optional[str] = None,
                                            description: Optional[str] = None,</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>) -&gt; Callable[[Callable[P, R]], LlamdaCallable[R]]:</term>
                                    <definition>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>def decorator(func: Callable[P, R]) -&gt; LlamdaCallable[R]:</term>
                                                <definition>
                                                    <paragraph>func_name: str = name or func.__name__
                                                        func_description: str = description or func.__doc__ or “”</paragraph>
                                                    <paragraph>sig = signature(func)
                                                        if len(sig.parameters) == 1:</paragraph>
                                                    <block_quote>
                                                        <paragraph>param = next(iter(sig.parameters.values()))
                                                            if isclass(param.annotation) and issubclass(</paragraph>
                                                        <block_quote>
                                                            <paragraph>param.annotation, BaseModel</paragraph>
                                                        </block_quote>
                                                        <definition_list>
                                                            <definition_list_item>
                                                                <term>):</term>
                                                                <definition>
                                                                    <definition_list>
                                                                        <definition_list_item>
                                                                            <term>llamda_func: LlamdaCallable[R] = LlamdaPydantic.create(</term>
                                                                            <definition>
                                                                                <paragraph>func_name, param.annotation, func_description, func</paragraph>
                                                                            </definition>
                                                                        </definition_list_item>
                                                                    </definition_list>
                                                                    <paragraph>)
                                                                        self._tools[func_name] = llamda_func
                                                                        return llamda_func</paragraph>
                                                                </definition>
                                                            </definition_list_item>
                                                        </definition_list>
                                                    </block_quote>
                                                    <definition_list>
                                                        <definition_list_item>
                                                            <term>fields: Dict[str, tuple[type, Any]] = {</term>
                                                            <definition>
                                                                <definition_list>
                                                                    <definition_list_item>
                                                                        <term>param_name: (</term>
                                                                        <definition>
                                                                            <paragraph>param.annotation if param.annotation != Parameter.empty else Any,
                                                                                param.default if param.default != Parameter.empty else …,</paragraph>
                                                                        </definition>
                                                                    </definition_list_item>
                                                                </definition_list>
                                                                <paragraph>)
                                                                    for param_name, param in sig.parameters.items()</paragraph>
                                                            </definition>
                                                        </definition_list_item>
                                                    </definition_list>
                                                    <paragraph>}</paragraph>
                                                    <definition_list>
                                                        <definition_list_item>
                                                            <term>llamda_func: LlamdaCallable[R] = LlamdaFunction.create(</term>
                                                            <definition>
                                                                <paragraph>call_func=func,
                                                                    fields=fields,
                                                                    name=func_name,
                                                                    description=func_description,</paragraph>
                                                            </definition>
                                                        </definition_list_item>
                                                    </definition_list>
                                                    <paragraph>)
                                                        self._tools[func_name] = llamda_func
                                                        return llamda_func</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                        <paragraph>return decorator</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>def get(self, names: Optional[List[str]] = None) -&gt; Sequence[OaiToolParam]:</term>
                                    <definition>
                                        <paragraph>“””Returns the tool spec for some or all of the functions in the registry”””
                                            if names is None:</paragraph>
                                        <block_quote>
                                            <paragraph>names = list(self._tools.keys())</paragraph>
                                        </block_quote>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>return [</term>
                                                <definition>
                                                    <paragraph>self._tools[name].to_tool_schema() for name in names if name in self._tools</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                        <paragraph>]</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>def execute_function(self, tool_call: LlToolCall) -&gt; ToolResponse:</term>
                                    <definition>
                                        <paragraph>“””Executes the function specified in the tool call with the required arguments”””
                                            try:</paragraph>
                                        <block_quote>
                                            <definition_list>
                                                <definition_list_item>
                                                    <term>if tool_call.name not in self._tools:</term>
                                                    <definition>
                                                        <paragraph>raise KeyError(f”Function ‘{tool_call.name}’ not found”)</paragraph>
                                                    </definition>
                                                </definition_list_item>
                                            </definition_list>
                                            <paragraph>parsed_args = json.loads(tool_call.arguments)
                                                result = self._tools[tool_call.name].run(<problematic ids="id2" refid="id1">**</problematic>parsed_args)</paragraph>
                                        </block_quote>
                                        <definition_list>
                                            <definition_list_item>
                                                <term>except KeyError as e:</term>
                                                <definition>
                                                    <paragraph>result = {“error”: f”Error: {str(e)}”}</paragraph>
                                                </definition>
                                            </definition_list_item>
                                            <definition_list_item>
                                                <term>except ValidationError as e:</term>
                                                <definition>
                                                    <paragraph>result = {“error”: f”Error: Validation failed - {str(e)}”}</paragraph>
                                                </definition>
                                            </definition_list_item>
                                            <definition_list_item>
                                                <term>except Exception as e:</term>
                                                <definition>
                                                    <paragraph>result = {“error”: f”Error: {str(e)}”}</paragraph>
                                                </definition>
                                            </definition_list_item>
                                            <definition_list_item>
                                                <term>return ToolResponse(</term>
                                                <definition>
                                                    <paragraph>id=tool_call.id,
                                                        name=tool_call.name,
                                                        arguments=tool_call.arguments,
                                                        result=json.dumps(result),</paragraph>
                                                </definition>
                                            </definition_list_item>
                                        </definition_list>
                                        <paragraph>)</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>def __getitem__(self, key: str) -&gt; LlamdaCallable[Any]:</term>
                                    <definition>
                                        <paragraph>return self._tools[key]</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>def __contains__(self, key: str) -&gt; bool:</term>
                                    <definition>
                                        <paragraph>return key in self._tools</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>def __len__(self) -&gt; int:</term>
                                    <definition>
                                        <paragraph>return len(self._tools)</paragraph>
                                    </definition>
                                </definition_list_item>
                                <definition_list_item>
                                    <term>def __iter__(self) -&gt; Iterator[str]:</term>
                                    <definition>
                                        <paragraph>return iter(self._tools)</paragraph>
                                    </definition>
                                </definition_list_item>
                            </definition_list>
                        </definition>
                    </definition_list_item>
                </definition_list>
            </section>
        </section>
    </section>
</document>
